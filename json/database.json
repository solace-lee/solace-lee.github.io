[
	{
		"title":"vuejs的学习笔记",
		"date":"20180810",
		"label":["VueJs"],
		"content":"",
		"code_link":"posts/2018081000.md",
		"demo_link":""
	},
	{
		"title":"博客的优化暂时告一段落",
		"date":"20180731",
		"label":["Other"],
		"content":"",
		"code_link":"posts/2018073100.md",
		"demo_link":""
	},
	{
		"title":"即将引入Markdown语言作为博客内容",
		"date":"20180727",
		"label":["Markdown","JQuery"],
		"content":"因为把博客内容写入到Jason数据不利于排版和阅读的体验，所以打算将博客正文内容用Ajax引入到页面中，以后写博客的时候也可以直接在IDE中用Markdown语言写，通过Jason将路径和其他信息导入到页面中。",
		"code_link":"posts/2018072700.md",
		"demo_link":""
	},
	{
		"title":"标签页事件",
		"date":"20180726",
		"label":["JQuery"],
		"content":"同样也是采用了遍历Jason数组的方法去实现这个功能，废话就不多说了，具体的去看代码。</br>今天同步到GitHub后发现，用浏览器打开会显示为网页内容不安全，之前测试的时候一直在微信中打开的并没有这个问题，今天试了Google浏览器也是这个情况，经过一顿谷歌搜索最后找到问题所在，居然是我引用的jQueryCDN链接不是HTTPS的加密链接所以浏览器默认不链接该JQ库，导致所有脚本方法无法运行。后来替换成HTTPS加密的jq库得以解决，以后我要注意这个情况，或者使用离线版的JQ库文件也行。</br>今天优化了JS代码，菜单的首页可以不用再跳转，节约了网络资源，也让页面响应更快。同时，首页、时间轴、标签这三个菜单可以在离线下使用，体验得到了更加好的优化。</br>接下来有时间还需要完善项目和关于中的内容了，最近要开始找工作了，更新就慢一些吧。",
		"code_link":"posts/2018072600.md",
		"demo_link":""
	},
	{
		"title":"博客正文事件",
		"date":"20180725",
		"label":["JQuery"],
		"content":"传入点击的正文标题，然后再次遍历Jason数据，找到对应的博客，然后再推送到主显示区域。一直很好奇，我的网页用这么多遍历算法会不会让性能变低影响体验呢？有谁能告诉我答案。",
		"code_link":"posts/2018072500.md",
		"demo_link":""
	},
	{
		"title":"菜单栏的点击页面重构事件",
		"date":"20180724",
		"label":["JQuery"],
		"content":"取消菜单栏各选项的跳转链接，保留首页链接留作刷新使用，菜单各项采用.text()获取文本内容后使用switch语句匹配并调用相关方法，今天主要构建时间轴的timeline()方法：</br>1.将.left内部内容清空后使用each方法遍历Jason数据并把日期，标题，标签append到.left下，从而完成时间轴的功能。</br></span>后期考虑对时间数据经行处理，使用可以按年或者月份来快速定位的方式。</span>",
		"code_link":"posts/2018072400.md",
		"demo_link":""
	},
	{
		"title":"jason数据中key值和多value值的遍历算法",
		"date":"20180723",
		"label":["Json","JQuery"],
		"content":"写博客的过程中发现，有时候一条博客会对应几个标签，这个时候如果不对Jason数据中的标签value值经行加工那之前写的标签模块将会变得一塌糊涂。</br>if($.isArray(tags['label'])) {</br>for(var i = 0; i < tags['label'].length; i++) {</br>tag.push(tags['label'][i]);</br>使用$.isArray()方法判断Jason数据中的标签是否是数组，是的话，对该数组经行遍历并push到tag变量中，留给后面经行排序和去重最终显示到主页的类别框中。",
		"code_link":"posts/2018072300.md",
		"demo_link":""
	},
	{
		"title":"响应式设计中的menu的bug及优化",
		"date":"20180722",
		"label":["JavaScript","JQuery"],
		"content":"在对页面经行宽度的拉伸时发现，当网页从窄屏转换成宽屏时，如果窄屏时曾经点开过菜单并又收起了菜单，那么直接切换到宽屏下菜单会被隐藏，之前写CSS的时候没有注意到这个问题，虽然很少会遇到需要这样操作的，但是无疑这也是一个bug,影响到了体验。</br>分析一下代码，我对窄屏模式下的菜单点击事件使用的是display：none-block的方式，这个方式平时使用起来是没有影响，但是响应式设计中却没有办法很简便地解决切换丢失菜单的问题。</br>思考一下，似乎可以换一个角度去思考这个问题，假如窄屏模式下，菜单不要隐藏，而是移出显示区域外呢，当点击菜单键时，菜单重新移入显示区域，这样后期还能给菜单做一个过渡效果，也能很好地解决响应式设计中菜单丢失的情况，一举两得。",
		"code_link":"posts/2018072200.md",
		"demo_link":""
	},
	{
		"title":"more&hide的优化",
		"date":"20180721",
		"label":["JQuery"],
		"content":"开始时数据比较少，并没有意识到如果只是给more和hide一个类名那么当博客内容多的时候点击一次more那么所有的更多都会被点击开，而且hide也是这样的效果。</br>引入this，让每一次点击more和hide都只对点击的该条博客生效，避免了各种混乱。",
		"code_link":"posts/2018072100.md",
		"demo_link":""
	},
	{
		"title":"引入jQuery，使用Jason数据动态更新博客",
		"date":"20180720",
		"label":["JQuery","Json"],
		"content":"替换博客内容到Jason数据中，以后更新博客只需要更新Jason中的数据即可，HTML和CSS部分可以和数据分离大大地增加了代码的复用性和效率。</br>切换到Jason方式后需要对HTML代码部分再次经行优化，以及对JS文件也顿时多了好多需要构建的方法，估计最多的JS方法都要花费在对HTML页面的重构上，到了这一步，我已经确定了菜单中的时间轴和标签页不做界面的跳转，仅使用JS抓取Jason中的数据处理后再对页面做重构。</br>除此之外我还要将我的JS代码做一些必要的注释，随着代码量的增加，合理的注释能够让条理更加清晰明了。</br>对于配色，现在越看越觉得草青色不是很适合,这个比较麻烦，在完成整体后再做这些细节上的处理吧。",
		"code_link":"posts/2018072000.md",
		"demo_link":""	
	},
	{
		"title":"添加博客主页的点击事件等",
		"date":"20180719",
		"label":["HTML","CSS3","JavaScript"],
		"content":"博客首页显示最近更新的5条博客内容，并在最近更新中也同步显示最近更新的5条融的标题。同时也做了一个标签区域，列出博客中的内容使用的主要技术，这块目前逻辑还比较乱，在完成首页其他部分后再来完善这块区域的JS代码。</br>关于博客的更新，如果用静态网页的方式制作后期添加博客内容将会变得异常麻烦，在考虑是否采用Jason数据方式，做一个动态更新的博客。</br>面对动态网页的制作单纯使用JavaScript复杂度会非常高，所以从今天起引入jQuery库，稍后经行JS文件的重构和一些页面的小修改。",
		"code_link":"posts/2018071900.md",
		"demo_link":""
	},
	{
		"title":"个人博客的优化--CSS3的响应式开发",
		"date":"20180718",
		"label":["HTML","CSS3"],
		"content":"好了，响应式开发也完成了，并优化了部分冗余代码，现在还有一个问题就是之前的学习中据说动态加载网页内容的体验会更好，那我的菜单栏是不是不要做成链接的形式呢？做成JS控制的方式加载相应模块或者功能应该不错，想想好像还挺复杂的，今晚大概想想具体的实现流程，明天可以试一试。",
		"code_link":"posts/2018071800.md",
		"demo_link":""	
	},
	{
		"title":"搭建我的第一个静态个人博客",
		"date":"20180717",
		"label":["HTML","CSS3"],
		"content":"熟悉好了GitHub，也知道了GitHub的工作方式，并注册了一个个人博客域名，接下来就是搭建整体的HTML，CSS3的博客框架了。我的想法是先用静态网页的方式把网站大致地先建立起来，然后再一点点完善和改进，好啦，先确定版式，并开始写HTML框架……</br>dang dang dang，框架结构写好了，立马就要填充CSS3看效果了。</br>上传上来看看主页效果，嗯，不错，先这样。明天继续完善一下，我觉得现在移动端这么火，是不是应该改改CSS3做个响应式的博客呢。",
		"code_link":"posts/2018071700.md",
		"demo_link":""
	},
	{
		"title":"初次接触GitHub",
		"date":"20180716",
		"label":["Other"],
		"content":"第一次接触到GitHub还是很久之前在大学期间找手机的刷机包，那时候觉得这里有好多大神，好多计算机高手，各种神奇的代码都来自于这里，那时候就已经萌生出以后也要成为一个程序员的想法，机缘巧合，在成为程序员的道路上饶了一个弯，还好现在进入这个行业还不算太晚，经过平时闲时的积累，现在写静态网页已经没有什么问题了，但是会来到这里肯定就不会止步于此，这是第一天，接触GitHub，先让我熟悉一下这个著名的代码托管平台是怎么使用的吧。",
		"code_link":"posts/2018071600.md",
		"demo_link":""	
	}
]